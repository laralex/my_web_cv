run-name: "deploy_prebuilt: ${{ github.ref_name }} # ${{ github.sha }}"
on:
  workflow_dispatch:
    inputs:
      build-run-id:
        description: 'Workflow run ID of successful `build` job'
        type: string
        required: true
      runs-on:
        description: 'Runner tag for `deploy` job'
        default: 'ubuntu-latest'
        required: true
        type: string
  workflow_call:
    inputs:
      build-run-id:
        description: 'Workflow run ID of successful `build` job'
        type: string
        required: true
      runs-on:
        description: 'Runner tag for `deploy` job'
        default: 'ubuntu-latest'
        required: true
        type: string
jobs:
  deploy:
    runs-on: ${{ inputs.runs-on }}
    if: ${{ inputs.runs-on != 'deployee' }}
    steps:
    - name: configure-ssh
      if: ${{ inputs.runs-on == 'ubuntu-latest' }}
      # check this thread to understand why its needed:
      # https://stackoverflow.com/a/70447517
      run: |
        install -m 600 -D /dev/null ~/.ssh/id_rsa
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        host=${{ secrets.SSH_HOST }}
        hosts="$(dig +short "$host" | grep -v '\.$' | sed -z 's|\n|,|g')$host"
        ssh-keyscan -H "$hosts" > ~/.ssh/known_hosts

    - name: download-artifacts
      uses: actions/download-artifact@master
      with:
        name: my_web_cv.zip.zip
        path: tmp
        run-id: ${{ inputs.build-run-id }}
        github-token: ${{ github.token }}

    # note the artifacts are double-zipped
    # unwrap *.zip.zip into *.zip which is then sent to they deployment server
    - name: upzip-double-zip
      working-directory: ./tmp
      run: unzip -o ./my_web_cv.zip.zip .

    - name: scp-artifacts
      run: |
        scp tmp/my_web_cv.zip ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ vars.WORK_DIR }}

    - name: deploy-artifacts
      if: ${{ success() }}
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
          mkdir -p /var/www/backup/my_web_cv && \
          mkdir -p /var/www/my_web_cv && \
          find /var/www/my_web_cv/ -exec cp -r {} /var/www/backup/my_web_cv \; && \
          rm -rf /var/www/my_web_cv/* && \
          unzip -o ${{ vars.WORK_DIR }}/my_web_cv.zip -d /var/www/my_web_cv && \
          exit"

    - name: cleanup
      if: ${{ always() && ( inputs.runs-on == 'ubuntu-latest' ) }}
      run: rm -rf ~/.ssh
  deploy_local:
    runs-on: ${{ inputs.runs-on }}
    if: ${{ inputs.runs-on == 'deployee' }}
    steps:
    - name: backup-current
      run: |
        mkdir -p /var/www/backup/my_web_cv
        mkdir -p /var/www/my_web_cv
        find /var/www/my_web_cv/ -exec cp -r {} /var/www/backup/my_web_cv \;
        rm -rf /var/www/my_web_cv/*

    - name: download-artifacts
      uses: actions/download-artifact@master
      with:
        name: my_web_cv.zip
        path: ${{ vars.WORK_DIR }}
        run-id: ${{ inputs.build-run-id }}
        github-token: ${{ github.token }}

    - name: unzip-artifacts
      run: unzip -o ${{ vars.WORK_DIR }}/my_web_cv.zip -d /var/www/my_web_cv